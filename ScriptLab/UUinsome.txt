name: UUinsome Slide Controls and Tags
description: >-
  A script to create a WebSocket connection between Open Broadcast Studio (OBS)
  and PowerPoint M365. This script is for PowerPoint M365 Desktop app on
  Windows.  

  Documentation: https://github.com/UUoocl/UUinsome
host: POWERPOINT
api_set: {}
script:
  content: >-
    // A script to control Open Broadcast Studio (OBS) with PowerPoint Slides

    // Shapes are used to tag instructions to a slide.

    // Use the User Interface to add tags.

    //

    // NOTE: this script only works in 'window slide show mode'


    var teleprompterSize,
      teleprompterSpeed,
      teleprompterIsPlaying = false;

    $("#get-slide-metadata").on("click", { direction: "Current" },
    goToSlideByIndex);

    $("#previous-slide").on("click", { direction: "Previous" },
    goToSlideByIndex);

    $("#next-slide").on("click", { direction: "Next" }, goToSlideByIndex);

    $("#connect-to-OBS").on("click", connectToOBS);

    $("#add-to-all-slides").on("click", addToAllSlides);

    $("#add-to-slide").on("click", addToSelectedSlide);

    $("#make-tag-list").on("click", makeScenetags);

    $("#increase-size").on("click", { change: 1 }, changeTeleprompterSize);

    $("#decrease-size").on("click", { change: -1 }, changeTeleprompterSize);

    $("#increase-speed").on("click", { change: 1 }, changeTeleprompterSpeed);

    $("#decrease-speed").on("click", { change: -1 }, changeTeleprompterSpeed);

    $("#Play-Pause").on("click", togglePlayPause);


    async function togglePlayPause() {
      teleprompterIsPlaying = !teleprompterIsPlaying;
      const speed = teleprompterIsPlaying === true ? teleprompterSpeed : 1;

      await obs.call("SetSourceFilterSettings", {
        sourceName: "Slide Notes Text",
        filterName: "Scroll",
        filterSettings: {
          speed_y: speed
        }
      });
      if (speed > 1) {
        document.getElementById("Play-Pause").innerHTML = "Pause";
      } else {
        document.getElementById("Play-Pause").innerHTML = "Play";
      }
    }


    async function changeTeleprompterSize(event) {
      teleprompterSize = Number(document.getElementById("sizeValue").value);
      teleprompterSize += event.data.change;
      await obs.call("SetInputSettings", {
        inputName: "Slide Notes Text",
        inputSettings: {
          font: {
            size: teleprompterSize
          }
        }
      });
      document.getElementById("sizeValue").value = teleprompterSize;
    }


    async function changeTeleprompterSpeed(event) {
      teleprompterSpeed = Number(document.getElementById("speedValue").value);
      console.log(event.data.change);
      teleprompterSpeed += event.data.change;
      document.getElementById("speedValue").value = teleprompterSpeed;
      await obs.call("SetSourceFilterSettings", {
        sourceName: "Slide Notes Text",
        filterName: "Scroll",
        filterSettings: {
          speed_y: teleprompterSpeed
        }
      });
    }


    async function getTeleprompterSize() {
      teleprompterSize = await obs.call("GetInputSettings", {
        inputName: "Slide Notes Text"
      });
      teleprompterSize = teleprompterSize.inputSettings.font.size;
      document.getElementById("sizeValue").value = teleprompterSize;
    }


    async function getTeleprompterSpeed() {
      teleprompterSpeed = await obs.call("GetSourceFilter", {
        sourceName: "Slide Notes Text",
        filterName: "Scroll"
      });
      teleprompterSpeed = teleprompterSpeed.filterSettings.speed_y;
      document.getElementById("speedValue").value = teleprompterSpeed;
    }


    async function addToSelectedSlide() {
      await PowerPoint.run(async (context) => {
        context.presentation.load("slides");
        await context.sync();
        let selectedSlideMetadata = await getSelectedSlideMetadata();
        //console.log(`current slide metadata, ${JSON.stringify(selectedSlideMetadata)}`);
        //convert JSON to javaScript object
        selectedSlideMetadata = JSON.parse(JSON.stringify(selectedSlideMetadata));
        // Decrement because the getSelectedSlideByIndex method is 1-based,
        // but the getItemAt method is 0-based.
        selectedSlideMetadata.index = selectedSlideMetadata.index - 1;

        let i = selectedSlideMetadata.index;
        makeShapes(context, i, -360, 0, 270, 350, "D5F4DD", 0, "obs-Entrance-BG", "");
        makeShapes(context, i, -335, 5, 25, 300, "9CD3D9", 0, "obs-Entrance-title", "Entrance");
        makeShapes(context, i, -355, 35, 25, 340, "9CD3D9", 0, "obs-Entrance-Scene", "scene");
        makeShapes(context, i, -355, 65, 25, 340, "9CD3D9", 0, "obs-Entrance-camera", "camera");
        makeShapes(context, i, -360, 270, 270, 350, "EFB8B6", 0, "obs-Exit-BG", "");
        makeShapes(context, i, -335, 275, 25, 300, "FFA99B", 0, "obs-Exit-title", "Exit");
        makeShapes(context, i, -355, 305, 25, 340, "FFA99B", 0.01, "obs-Exit-Scene", "scene");
        makeShapes(context, i, -355, 335, 25, 340, "FFA99B", 0.01, "obs-Exit-camera", "camera");
        makeShapes(context, i, 0, -275, 270, 700, "FFFFFF", 0.0, "obs-Notes", "Enter Notes");
      });
    }

    async function addToAllSlides() {
      // add UUinsome tags to each slide
      await PowerPoint.run(async (context) => {
        context.presentation.load("slides");
        await context.sync();
        const allSlidesCount = context.presentation.slides.getCount();
        // context.presentation.slides.load("items");
        await context.sync();
        for (let i = 0; i < allSlidesCount.value; i++) {
          makeShapes(context, i, -360, 0, 270, 350, "D5F4DD", 0, "obs-Entrance-BG", "");
          makeShapes(context, i, -335, 5, 25, 300, "9CD3D9", 0, "obs-Entrance-title", "Entrance");
          makeShapes(context, i, -355, 35, 25, 340, "9CD3D9", 0, "obs-Entrance-Scene", "scene");
          makeShapes(context, i, -355, 65, 25, 340, "9CD3D9", 0, "obs-Entrance-camera", "camera");
          makeShapes(context, i, -360, 270, 270, 350, "EFB8B6", 0, "obs-Exit-BG", "");
          makeShapes(context, i, -335, 275, 25, 300, "FFA99B", 0, "obs-Exit-title", "Exit");
          makeShapes(context, i, -355, 305, 25, 340, "FFA99B", 0.01, "obs-Exit-Scene", "scene");
          makeShapes(context, i, -355, 335, 25, 340, "FFA99B", 0.01, "obs-Exit-camera", "camera");
          makeShapes(context, i, 0, -275, 270, 700, "FFFFFF", 0.0, "obs-Notes", "Enter Notes");
        }
        // let allSlideItems: PowerPoint.Slide[] = context.presentation.slides.items;
        // allSlideItems.map((slide, index) => {
        //   allSlidesList[slide.id] = `Slide ${index + 1}`;
        // });
      });
    }


    async function addTagToSlide(element) {
      await PowerPoint.run(async (context) => {
        //console.log("working", element, element.dataset, element.id, element.innerHTML);
        context.presentation.load("slides");
        await context.sync();
        let selectedSlideMetadata = await getSelectedSlideMetadata();
        //console.log(`current slide metadata, ${JSON.stringify(selectedSlideMetadata)}`);
        //convert JSON to javaScript object
        selectedSlideMetadata = JSON.parse(JSON.stringify(selectedSlideMetadata));
        // Decrement because the getSelectedSlideByIndex method is 1-based,
        // but the getItemAt method is 0-based.
        selectedSlideMetadata.index = selectedSlideMetadata.index - 1;

        let i = selectedSlideMetadata.index;
        deleteDuplicate(i, context, element.dataset.type, element.dataset.event);
        makeShapes(
          context,
          i,
          Number(element.dataset.left),
          Number(element.dataset.top),
          Number(element.dataset.height),
          Number(element.dataset.width),
          element.dataset.color,
          Number(element.dataset.transparency),
          `obs-${element.id}`,
          `${element.dataset.type}${element.dataset.event}${element.innerHTML}`
        );
      });
    }


    async function deleteDuplicate(i, context, type, event) {
      const shapes: PowerPoint.ShapeCollection = context.presentation.slides.getItemAt(i).shapes;
      shapes.load("items");

      await context.sync();

      await shapes.items.forEach(async (shape, index) => {
        if (shape.name.startsWith(`obs-${type}${event}`)) {
          shape.delete();
        }
      });
      await context.sync();
    }


    async function makeShapes(context, i, left, top, height, width, color,
    transparency, name, text) {
      const shapes: PowerPoint.ShapeCollection = context.presentation.slides.getItemAt(i).shapes;
      const shapeOptions: PowerPoint.ShapeAddOptions = {
        left: left,
        top: top,
        height: height,
        width: width
      };
      const newShape: PowerPoint.Shape = shapes.addGeometricShape(
        PowerPoint.GeometricShapeType.roundRectangle,
        shapeOptions
      );
      newShape.name = name;
      newShape.fill.foregroundColor = color;
      newShape.fill.transparency = transparency;
      newShape.textFrame.textRange.font.color = "black";
      newShape.textFrame.textRange.font.size = 16;
      newShape.textFrame.textRange.text = text;
      newShape.textFrame.textRange.paragraphFormat.horizontalAlignment = "right";

      if (name === "obs-Notes") {
        newShape.textFrame.verticalAlignment = "Bottom";
        newShape.textFrame.autoSizeSetting = "AutoSizeShapeToFitText";
        newShape.textFrame.textRange.paragraphFormat.horizontalAlignment = "left";
      }
      await context.sync();
    }


    function getSelectedSlideMetadata() {
      // Wrap a call of one of the Common APIs in a Promise-returning
      // function, so that it can be easily called within a run() function
      // of an application-specific API.
      return new OfficeExtension.Promise<any>(function(resolve, reject) {
        Office.context.document.getSelectedDataAsync(Office.CoercionType.SlideRange, function(asyncResult) {
          try {
            if (asyncResult.status === Office.AsyncResultStatus.Failed) {
              reject(console.error(asyncResult.error.message));
            } else {
              const result = asyncResult.value as any;
              resolve(result.slides[0]);
            }
          } catch (error) {
            reject(console.log(error));
          }
        });
      });
    }


    //Button triggers


    async function goToSlideByIndex(event) {
      let direction = event.data.direction;
      let pptData;
      await PowerPoint.run(async function(context) {
        if (direction === "Next" || direction === "Current") {
          //Get Current Slide Title and Index
          let selectedSlideMetadata = await getSelectedSlideMetadata();
          //convert JSON to javaScript object
          selectedSlideMetadata = JSON.parse(JSON.stringify(selectedSlideMetadata));
          // Decrement because the getSelectedSlideByIndex method is 1-based,
          // but the getItemAt method is 0-based.
          selectedSlideMetadata.index = selectedSlideMetadata.index - 1;

          //get current slide exit data
          let getEvent = direction === "Current" ? "entrance" : "exit";
          pptData = await getNotesForOBS(selectedSlideMetadata.index, getEvent);
          pptData["slideTitle"] = selectedSlideMetadata.title;
          //console.log(`pptData returned ${JSON.stringify(pptData)}`);

          //if pptData has scene
          if (pptData.hasOwnProperty("scene")) {
            await obs.call("SetCurrentProgramScene", {
              sceneName: `scene|||${pptData.scene}`
            });
          }

          //if pptData has notes
          if (pptData.hasOwnProperty("notes")) {
            await obs.call("SetInputSettings", {
              inputName: "Slide Notes Text",
              inputSettings: {
                text: JSON.parse(pptData.notes).replaceAll("\r", "\n")
              }
            });

            //Reset the teleprompter
            await obs
              .call("SetSourceFilterSettings", {
                sourceName: "Slide Notes Text",
                filterName: "Scroll",
                filterSettings: {
                  speed_y: 0
                }
              })
              .then(
                setTimeout(async () => {
                  await obs.call("SetSourceFilterSettings", {
                    sourceName: "Slide Notes Text",
                    filterName: "Scroll",
                    filterSettings: {
                      speed_y: teleprompterSpeed
                    }
                  });
                }, 1000)
              );
          }

          //if pptData has camera
          if (pptData.hasOwnProperty("camera")) {
            let cameraSources = await obs.call("GetSceneItemList", { sceneName: "Camera" });
            cameraSources.sceneItems.forEach(async (source) => {
              if (source.sourceName === pptData.camera) {
                await obs.call("SetSceneItemEnabled", {
                  sceneName: "Camera",
                  sceneItemId: source.sceneItemId,
                  sceneItemEnabled: true
                });
              } else {
                await obs.call("SetSceneItemEnabled", {
                  sceneName: "Camera",
                  sceneItemId: source.sceneItemId,
                  sceneItemEnabled: false
                });
              }
            });
          }
          //send slide data to OBS
          if (platform != "Mac") {
            //await sendWebsocketMessageToOBS(pptData);
          }
        }
        //get the next or previous slide slide
        if (direction === "Next" || direction === "Previous") {
          if (direction === "Next") {
            await goToSlide(direction);
          } else {
            await goToSlide(direction);
          }
          goToSlideByIndex({ data: { direction: "Current" } });
        }
      });
    }


    //change slide

    async function goToSlide(direction) {
      return new OfficeExtension.Promise<any>(function(resolve, reject) {
        const goTo = direction === "Next" ? Office.Index.Next : Office.Index.Previous;
        Office.context.document.goToByIdAsync(goTo, Office.GoToType.Index, function(asyncResult) {
          try {
            if (asyncResult.status == "failed") {
              console.log("Action failed with error: " + asyncResult.error.message);
            } else {
              //console.log(`Navigation successful`);
              resolve();
            }
          } catch (error) {
            reject(console.log(error));
          }
        });
      });
    }


    // get the shapes where the name begins with "obs-" on the current slide.

    async function getNotesForOBS(slideIndex, action) {
      var pptData = { actionName: `slide_${action}` },
        found = 0;
      const indexArray = [];
      const shapeNames = [];
      let result = await PowerPoint.run(async (context) => {
        // Get every shape in the current slide.
        const shapes: PowerPoint.ShapeCollection = context.presentation.slides.getItemAt(slideIndex).shapes;
        //load all the shape properties
        shapes.load("items");

        //if the slide transition is underway the context sync fails.
        //this tries to get the current slide detials 1 per second until successful.
        try {
          await context.sync();
        } catch (error) {
          setTimeout(() => goToSlideByIndex({ data: { direction: "Current" } }), 1000);
        }

        await shapes.items.forEach(async (shape, index) => {
          //console.log(`index: ${index}, ID: ${shape.id}, Name: ${shape.name}`);
          // find the "|||" shapes index
          if (shape.name.startsWith("obs-")) {
            found = 1;
            indexArray.push(index);
            shapeNames.push(shape.name);
          }
        });
        //get Shape Text
        const shapeTextRanges = [];
        const shapeFills = [];
        if (found) {
          //load text console.log(indexArray.length);
          for (let i = 0; i < indexArray.length; i++) {
            const shapeTextRange: PowerPoint.TextRange = shapes.getItemAt(indexArray[i]).textFrame.textRange;
            const shapeFill: PowerPoint.ShapeFill = shapes.getItemAt(indexArray[i]).fill;
            shapeTextRanges.push(shapeTextRange);
            shapeTextRanges[i].load("text");
            shapeFills.push(shapeFill);
            shapeFills[i].load("transparency");
          }
        }
        await context.sync();

        //Use event symbol to set actionCode
        let actionCode;
        switch (action) {
          case "entrance" || "current":
            actionCode = "\\\\\\";
            break; //Entrance
          case "exit":
            actionCode = "///";
            break; //Exit
        }

        //build the message
        for (let i = 0; i < shapeTextRanges.length; i++) {
          if (shapeTextRanges[i].text.includes(actionCode)) {
            const keyValue = shapeTextRanges[i].text.split(actionCode);
            pptData[keyValue[0].trim()] = keyValue[1].trim();
          }
          if (shapeNames[i] === "obs-Notes" && (action === "entrance" || action === "current")) {
            pptData["notes"] = JSON.stringify(shapeTextRanges[i].text);
          }
        }
        pptData.slidePosition = slideIndex;
        //await sendWebsocketMessageToOBS(pptData);
      });
      return pptData;
    }


    var obs = new OBSWebSocket();

    async function connectToOBS() {
      //connect to OBS Websocket localhost
      //Get websocket connection info
      //Enter the websocketIP address
      const websocketIP = document.getElementById("IP").value;

      //Enter the OBS websocket port number
      const websocketPort = document.getElementById("Port").value;

      //Enter the OBS websocket server password
      const websocketPassword = document.getElementById("PW").value;

      //console.log(`ws://${websocketIP}:${websocketPort}`);
      // connect to OBS websocket
      try {
        const { obsWebSocketVersion, negotiatedRpcVersion } = await obs.connect(
          `ws://${websocketIP}:${websocketPort}`,
          websocketPassword,
          {
            rpcVersion: 1
          }
        );
        //console.log(`Connected to server ${obsWebSocketVersion} (using RPC ${negotiatedRpcVersion})`);
        document.getElementById("connectToOBS").style.display = "none";
        document.getElementById("tagList").style.display = "block";

        //get data after successfully connecting
        getSceneList();
        getTeleprompterSize();
        getTeleprompterSpeed();
      } catch (error) {
        console.error("Failed to connect", error.code, error.message);
      }
      obs.on("error", (err) => {
        console.error("Socket error:", err);
      });
    }


    //Windows platform

    async function getSceneList() {
      let sceneTable = "";
      sceneTable +=
        "<table border=1 cellpadding=3 cellspacing=0><tr><td bgcolor=#3333EE><font color=white>Enter</font></td><td bgcolor=#3333EE><font color=white>Exit</font></td></tr>";
      const sceneList = await obs.call("GetSceneList");
      sceneList.scenes.forEach((scene, index) => {
        // find scenes starting with "Scene"
        if (scene.sceneName.startsWith("scene|||")) {
          //document.getElementById("sceneList").innerHTML =
          //document.getElementById("sceneList").innerHTML + `<li class="ms-Button">${scene.sceneName}</li>`;
          const sceneName = scene.sceneName.split("|||");
          sceneTable +=
            "<tr><td>" +
            `<li class="ms-Button" data-left = -355 data-top = 35 data-type= "scene" data-event = "\\\\\\" data-height = 25 data-width = 340 data-color = "9CD3D9" data-transparency = 0 id="scene\\\\\\ ${sceneName[1]}" onclick=addTagToSlide(this)>${sceneName[1]}</li>` +
            "</td><td>" +
            `<li class="ms-Button" data-left = -355 data-top = 305 data-type= "scene" data-event = "///" data-height = 25 data-width = 340 data-color = "FFA99B" data-transparency = 0.01 id="scene/// ${sceneName[1]}" onclick=addTagToSlide(this)>${sceneName[1]}</li>` +
            "</td></tr>";
        }
        if (scene.sceneName === "Camera") {
          getCameraList();
        }
      });
      //addListItemClickListener();
      sceneTable += "</table>";
      document.getElementById("sceneList").innerHTML = sceneTable;
    }


    async function getCameraList() {
      let cameraTable = "";
      cameraTable +=
        "<table border=1 cellpadding=3 cellspacing=0><tr><td bgcolor=#3333EE><font color=white>Enter</font></td><td bgcolor=#3333EE><font color=white>Exit</font></td></tr>";
      let cameraSources = await obs.call("GetSceneItemList", { sceneName: "Camera" });
      cameraSources.sceneItems.forEach((source, index) => {
        document.getElementById("cameraList").innerHTML =
          document.getElementById("cameraList").innerHTML +
          `<li class="ms-Button" data-left = -355 data-top = 35 data-type= "camera" data-event = "\\\\\\" data-height = 25 data-width = 340 data-color = "9CD3D9" data-transparency = 0 id="camera\\\\\\ ${source.sourceName}" onclick=addTagToSlide(this)>${source.sourceName}</li>`;
        cameraTable +=
          "<tr><td>" +
          `<li class="ms-Button" data-left = -355 data-top = 65 data-type= "camera" data-event = "\\\\\\" data-height = 25 data-width = 340 data-color = "9CD3D9" data-transparency = 0 id="camera\\\\\\ ${source.sourceName}" onclick=addTagToSlide(this)>${source.sourceName}</li>` +
          "</td><td>" +
          `<li class="ms-Button" data-left = -355 data-top = 335 data-type= "camera" data-event = "///" data-height = 25 data-width = 340 data-color = "FFA99B" data-transparency = 0.01 id="camera/// ${source.sourceName}" onclick=addTagToSlide(this)>${source.sourceName}</li>` +
          "</td></tr>";
      });
      cameraTable += "</table>";
      document.getElementById("cameraList").innerHTML = cameraTable;
    }


    async function addListItemClickListener() {
      //add a click listener to each list item
      const listItems = document.querySelectorAll("li");
      listItems.forEach((item) => {
        item.addEventListener("click", async function(event) {
          await PowerPoint.run(async (context) => {
            const shapes: PowerPoint.ShapeScopedCollection = context.presentation.getSelectedShapes();
            await context.sync();
            shapes.load("items");
            await context.sync();
            shapes.items[0].load();
            const shapeFill: PowerPoint.ShapeFill = shapes.items[0].fill;
            shapeFill.load("transparency");
            await context.sync();
            const tagType = shapeFill.transparency === 0 ? "\\\\\\" : "///";
            shapes.items[0].textFrame.textRange.text = event.target.textContent.replace("|||", tagType);
          });
        });
      });
    }


    obs.on("InputSettingsChanged", async function(event) {
      //if ppt scriptlab text source
      if (event.inputName === "Navigation Text") {
        //get the message
        const navigate = event.inputSettings.text;
        //if next
        if (navigate === "Next") {
          goToNextSlideByIndex();
          setTimeout(clearNavigateRequest, 3000);
        }
        //if current
        if (navigate === "Current") {
          goToNextSlideByIndex();
          setTimeout(clearNavigateRequest, 3000);
        }
        //if previous
        if (navigate === "Previous") {
          goToPreviousSlideByIndex();
          setTimeout(clearNavigateRequest, 3000);
        }
      }
    });


    //clear text source

    async function clearNavigateRequest() {
      await obs.call("SetInputSettings", {
        inputName: "Navigation Text",
        inputSettings: {
          text: ""
        }
      });
    }


    //return Slide details to OBS

    async function sendWebsocketMessageToOBS(pptSlideDetails) {
      //send slide details to OBS Browser
      //console.log(`slide websocket message| ${JSON.stringify(pptSlideDetails)}`);
      await obs.call("CallVendorRequest", {
        vendorName: "obs-browser",
        requestType: "emit_event",
        requestData: {
          event_name: "powerpoint-message",
          event_data: { pptSlideDetails }
        }
      });

      //send slide details to Advanced Scene Switcher
      await obs.call("CallVendorRequest", {
        vendorName: "AdvancedSceneSwitcher",
        requestType: "AdvancedSceneSwitcherMessage",
        requestData: {
          message: `${JSON.stringify(pptSlideDetails)}`
        }
      });

      return;
    }


    var platform;

    function getPlatform() {
      const contextInfo = Office.context.diagnostics;
      const platformType: Office.PlatformType = contextInfo.platform;
      platform = platformType;
      if (platformType === "Mac") {
        document.getElementById("connectToOBS").style.display = "none";
      } else {
        document.getElementById("pasteOBSscenes").style.display = "none";
      }
    }


    getPlatform();


    //For Mac platform

    async function makeScenetags() {
      document.getElementById("pasteOBSscenes").style.display = "none";
      document.getElementById("tagList").style.display = "block";
      let sceneInput = document.getElementById("obsScenes").value;
      sceneInput = JSON.parse(sceneInput);
      //console.log(sceneInput, typeof sceneInput);
      await PowerPoint.run(async (context) => {
        sceneInput.scenes.forEach((scene, index) => {
          // find scenes starting with "Scene"
          if (scene.sceneName.startsWith("scene|||")) {
            document.getElementById("sceneList").innerHTML =
              document.getElementById("sceneList").innerHTML + `<li class="ms-Button">${scene.sceneName}</li>`;
          }
          if (scene.sceneName === "Camera") {
            scene.sources.forEach((source, index) => {
              document.getElementById("cameraList").innerHTML =
                document.getElementById("cameraList").innerHTML +
                `<li class="ms-Button" id="camera\\\\\\ ${source.sourceName}">camera||| ${source}</li>`;
              document
                .getElementById(`camera\\\\\\ ${source.sourceName}`)
                .addEventListener("click", () =>
                  makeShapes(context, index, -355, 35, 25, 340, "9CD3D9", 0, "obs-Entrance-Scene", "scene")
                );
            });
          }
          //addListItemClickListener();
        });
      });
    }


    //general Office.initialize function. Fires on load of the add-in.

    Office.initialize = function() {
      //var Globals = { activeViewHandler: 0, firstSlideId: 0 };

      //console.log(getActiveFileView())
      //Gets whether the current view is edit or read.
      const currentView = getActiveFileView();

      //register for the active view changed handler
      registerActiveViewChanged();

      //render the content based off of the currentView
      //....
    };


    function getActiveFileView() {
      Office.context.document.getActiveViewAsync(function(asyncResult) {
        if (asyncResult.status == "failed") {
          console.log("Action failed with error: " + asyncResult.error.message);
        } else {
          console.log(asyncResult.value);
        }
      });
    }


    function registerActiveViewChanged() {
      Globals.activeViewHandler = function(args) {
        console.log(JSON.stringify(args));
      };

      Office.context.document.addHandlerAsync(Office.EventType.ActiveViewChanged, Globals.activeViewHandler, function(
        asyncResult
      ) {
        if (asyncResult.status == "failed") {
          console.log("Action failed with error: " + asyncResult.error.message);
        } else {
          console.log(asyncResult.status);
        }
      });
    }


    //OBS HotKey Controls


    obs.on("SceneItemEnableStateChanged", async function(event) {
      //if ppt scriptlab text source
      if (event.sceneItemEnabled === true && event.sceneName === "Slide Controls") {
        //get source name
        const sceneItem = await obs.call("GetSceneItemSource", {
          sceneName: "Slide Controls",
          sceneItemId: event.sceneItemId
        });

        const control = sceneItem.sourceName;

        //if next
        switch (control) {
          case "NextSlide":
            document.getElementById("next-slide").click();
            break;
          case "PreviousSlide":
            document.getElementById("previous-slide").click();
            break;
          case "Play-Pause":
            togglePlayPause();
            break;
          case "Text Smaller":
            document.getElementById("decrease-size").click();
            break;
          case "Text Bigger":
            document.getElementById("increase-size").click();
            break;
          case "Scroll Slower":
            document.getElementById("decrease-speed").click();
            break;
          case "Scroll Faster":
            document.getElementById("increase-speed").click();
            break;
        }

        await obs.call("SetSceneItemEnabled", {
          sceneName: "Slide Controls",
          sceneItemId: event.sceneItemId,
          sceneItemEnabled: false
        });
      }
    });
  language: typescript
template:
  content: "<section id=\"connectToOBS\" class=\"setup ms-font-m\">\n\t<h3>OBS WebSocket Server Settings</h3>\n\t<p class=\"ms-font-m\">Connect PowerPoint to OBS</p>\n\t<span class=\"ms-Button-label\">Enter WebSocket Server IP Address</span>\n\t<Input id=\"IP\" class=\"ms-Button\" value=\"localhost\"></Input>\n\t<span class=\"ms-Button-label\">Enter WebSocket Server Port</span><br>\n\t<Input id=\"Port\" class=\"ms-Button\" value=\"4455\"></Input>\n\t<span class=\"ms-Button-label\">Enter WebSocket Server Password</span><br>\n\t<Input type=\"password\" id=\"PW\" class=\"ms-Button\"></Input>\n\t<button id=\"connect-to-OBS\" class=\"ms-Button\">\n\t      <span class=\"ms-Button-label\">Connect to OBS WebSocket Server</span>\n    </button>\n</section>\n\n<section id=\"pasteOBSscenes\" class=\"setup ms-font-m\">\n\t<h3>Manually enter OBS scenes</h3>\n\t<p class=\"ms-font-m\">Use the Get User Media,<b> https://uuoocl.github.io/GUM/</b>, Github page to create a list of\n\t\tyour OBS Scenes and Sources. Copy and paste the list</p>\n\t<span class=\"ms-Button-label\">Enter Scenes and Sources</span>\n\t<Input id=\"obsScenes\" class=\"ms-Button\"></Input>\n\t<button id=\"make-tag-list\" class=\"ms-Button\">\n\t  <span class=\"ms-Button-label\">Make a list tags</span>\n  </button>\n</section>\n\n<section class=\"ms-font-m\">\n\t<h3>Slide Navigation</h3>\n\t<p class=\"ms-font-m\">Navigate the presentation.</p>\n</section>\n\n<button id=\"previous-slide\" class=\"ms-Button\">\n    <span class=\"ms-Button-label\">Previous slide</span>\n</button>\n\n<button id=\"get-slide-metadata\" class=\"ms-Button\">\n    <span class=\"ms-Button-label\">Get current slide notes</span>\n</button>\n\n<button id=\"next-slide\" class=\"ms-Button\">\n    <span class=\"ms-Button-label\">Next slide</span>\n</button>\n\n\n<section class=\"ms-font-m\">\n\t<h3>Telepromter Settings</h3>\n\n\t<button id=\"Play-Pause\" class=\"ms-Button\">\n    <span class=\"ms-Button-label\">Play</span>\n</button>\n\n\t<p class=\"ms-font-m\">Text size</p>\n\n\t<button id=\"decrease-size\" class=\"ms-Button\">\n    <span class=\"ms-Button-label\">decrease -</span>\n</button>\n\n\t<input id=\"sizeValue\" class=\"ms-Button\" value=12>\n\t<span class=\"ms-Input-label\"></span>\n\t</input]>\n\n\t<button id=\"increase-size\" class=\"ms-Button\">\n    <span class=\"ms-Button-label\">increase +</span>\n</button>\n</section>\n\n<p class=\"ms-font-m\">Scroll speed</p>\n<button id=\"decrease-speed\" class=\"ms-Button\">\n    <span class=\"ms-Button-label\">decrease -</span>\n</button>\n\n<input id=\"speedValue\" class=\"ms-Button\" value=12>\n<span class=\"ms-Input-label\"></span>\n</input]>\n\n<button id=\"increase-speed\" class=\"ms-Button\">\n    <span class=\"ms-Button-label\">increase +</span>\n</button>\n\n\n<section class=\"ms-font-m\">\n\t<p class=\"ms-font-m\">Add UUinsome controls</p>\n</section>\n\n<section class=\"ms-font-m\">\n\t<p class=\"ms-font-m\">Add Notes section</p>\n</section>\n\n<button id=\"add-to-slide\" class=\"ms-Button\">\n\t\t\t<span class=\"ms-Button-label\">Add to selected slide</span>\n\t</button>\n\n<button id=\"add-to-all-slides\" class=\"ms-Button\">\n\t\t\t<span class=\"ms-Button-label\">Add to all alides</span>\n\t</button>\n\n<section id=\"tagList\" class=\"setup ms-font-m\" hidden>\n\t<h3>Scenes Tags</h3>\n\t<span class=\"ms-Button-label\">click a tag below to set the OBS Scene</span>\n\n\t<ul id=sceneList>\n\t</ul>\n\n\t<h3>Camera</h3>\n\t<ul id=cameraList>\n\t</ul>\n\t<p>Shapes that indicate an Entrance tag include the text \"\\\\\\\" and have 0% Transparency.<br>\n\tShapes that indicate an Entrance tag include the text \"///\" and have 1% Transparency.</p>\n\n</section>"
  language: html
style:
  content: |
    section.samples {
        margin-top: 20px;
    }

    section.samples .ms-Button, section.setup .ms-Button {
      display: block;
      margin-bottom: 5px;
      margin-left: 0px;
      min-width: 80px;
    }

    ul, .ms-Button{
      padding: 0;
      list-style-type: none;
      margin: 0;
      margin-bottom: 2px;
      margin-left: 0px;
    }

    p {
       font-size: smaller;
       line-height: normal;
    }
  language: css
libraries: |-
  https://appsforoffice.microsoft.com/lib/1/hosted/office.js
  @types/office-js

  office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
  office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

  core-js@2.4.1/client/core.min.js
  @types/core-js

  jquery@3.1.1
  @types/jquery@3.3.1
  obs-websocket-js