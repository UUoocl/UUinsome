name: Get slide Controls metadata
description: Gets the title, index, and ID of the selected slides.
host: POWERPOINT
api_set: {}
script:
  content: |-
    // A script to control Open Broadcast Studio (OBS) with PowerPoint Slides
    // Add a Textbox to each slide and enter an OBS scene name. 
    // Name the text box "obsScene"
    //
    // The OBS scene will change when the slide changes.  
    //
    // NOTE: this script only works in 'window slide show mode'

    $("#get-slide-metadata").on("click", currentSlide);
    $("#previous-slide").on("click", goToPreviousSlideByIndex);
    $("#next-slide").on("click", goToNextSlideByIndex);
    $("#connect-to-OBS").on("click", connectToOBS);

    async function getSlideMetadata(direction) {
      //console.log(getActiveFileView());
      await Office.context.document.getSelectedDataAsync(Office.CoercionType.SlideRange, async function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
          console.error(asyncResult.error.message);
        } else {
          //console.log(JSON.stringify(asyncResult.value, null, 4));
          let result = asyncResult.value;
          result = result.slides[0].index;
          if (direction === "next") {
            goToNextSlide(result);
          }
          if (direction === "previous") {
            result = result - 2;
            goToPreviousSlide(result);
          }
          if (direction === "current") {
            result = result - 1;
            getNotesForOBS(result);
          }
        }
      });
    }

    //Requests from OBS
    window.addEventListener("pptScriptLab_NextSlide", function (event) {
      console.log("message received: ",event)
      goToNextSlideByIndex
    })

    window.addEventListener("pptScriptLab_PreviousSlide", function (event) {
      //console.log("message received: ",event)
      goToPreviousSlideByIndex;
    })

    //Button triggers
    async function currentSlide() {
      getSlideMetadata("current");
    }

    async function goToNextSlideByIndex() {
      getSlideMetadata("next");
    }

    async function goToPreviousSlideByIndex() {
      getSlideMetadata("previous");
    }

    //change slide
    function goToNextSlide(slideIndex) {
      const goToNext = Office.Index.Next;
      Office.context.document.goToByIdAsync(goToNext, Office.GoToType.Slide, function(asyncResult) {
        if (asyncResult.status == "failed") {
          console.log("Action failed with error: " + asyncResult.error.message);
        } else {
          console.log(`Navigation successful, slide index, ${slideIndex}`);
          getNotesForOBS(slideIndex);
        }
      });
    }

    async function goToPreviousSlide(slideIndex) {
      const goToPrevious = Office.Index.Previous;
      Office.context.document.goToByIdAsync(goToPrevious, Office.GoToType.Index, function(asyncResult) {
        if (asyncResult.status == "failed") {
          console.log("Action failed with error: " + asyncResult.error.message);
        } else {
          console.log(`Navigation successful, slide index, ${slideIndex}`);
          getNotesForOBS(slideIndex);
        }
      });
    }

    // get the Notes and OBS scene from the current slide.
    async function getNotesForOBS(slideIndex) {
      var pptData = {}, sceneIndex = -1, notesIndex = -1, found = 0;
      await PowerPoint.run(async (context) => {
        // Get every shape in the current slide.
        const shapes: PowerPoint.ShapeCollection = context.presentation.slides.getItemAt(slideIndex).shapes;
        //load all the shape properties
        shapes.load("items");
        await context.sync();

        // find the shape's index 
        await shapes.items.forEach(async (shape,index) => {
          if (shape.name === "obsScene") {
            found = 1;
            console.log(`index: ${index}, ID: ${shape.id}, Name: ${shape.name}`);
            sceneIndex = index;
          }
          
          if (shape.name === "slideNotes") {
            found = 1
            console.log(`index: ${index}, ID: ${shape.id}, Name: ${shape.name}`);
            notesIndex = index;
          }
        }) 
        if(found){
          //load text 
          if(notesIndex > -1){
          const notesTextRange: PowerPoint.TextRange = shapes.getItemAt(notesIndex).textFrame.textRange;
          notesTextRange.load("text");
          }

          if(sceneIndex > -1){
          const sceneTextRange: PowerPoint.TextRange = shapes.getItemAt(sceneIndex).textFrame.textRange;
          sceneTextRange.load("text");
          }
          
          await context.sync();
          console.log(`notesIndex ${notesIndex}`)
          if (notesIndex > -1) {
            pptData.slideNotes = JSON.stringify(notesTextRange.text)
            console.log(`got notes, ${pptData.slideNotes}`);
            
            //send PPT Notes to Advanced Scene Switcher
            obs.call("CallVendorRequest", {
              vendorName: "AdvancedSceneSwitcher",
              requestType: "AdvancedSceneSwitcherMessage",
              requestData: {
                message: `{ "requestName" : "pptNotes", "notes" : ${JSON.stringify(pptData.slideNotes)} }`,
              },
            });
          }

          if (sceneIndex > -1) {
          pptData.scene = sceneTextRange.text
          console.log(`got scene, ${sceneTextRange.text}`);
          
          //set OBS Scene
          console.log(`output, ${pptData.scene}`)  
          await obs.call("SetCurrentProgramScene", {
              sceneName: pptData.scene,
          });
          }
      
          //send websocket message to OBS
          pptData.slidePosition = slideIndex + 1;
          
          obs.call("CallVendorRequest", {
            vendorName: "obs-browser",
            requestType: "emit_event",
            requestData: {
              event_name: "powerpoint-message",
              event_data: { pptData },
            },
          });
        }else{
            //set OBS Notes Text Source
          obs.call("CallVendorRequest", {
            vendorName: "AdvancedSceneSwitcher",
            requestType: "AdvancedSceneSwitcherMessage",
            requestData: {
              message: `{ "requestName" : "pptNotes", "notes" : "no notes" }`,
            },
          });    
        }
      })
    }

    //general Office.initialize function. Fires on load of the add-in.
    Office.initialize = function() {
      //var Globals = { activeViewHandler: 0, firstSlideId: 0 };

      //console.log(getActiveFileView())
      //Gets whether the current view is edit or read.
      const currentView = getActiveFileView();

      //register for the active view changed handler
      registerActiveViewChanged();

      //render the content based off of the currentView
      //....
    };

    function getActiveFileView() {
      Office.context.document.getActiveViewAsync(function(asyncResult) {
        if (asyncResult.status == "failed") {
          console.log("Action failed with error: " + asyncResult.error.message);
        } else {
          console.log(asyncResult.value);
        }
      });
    }

    function registerActiveViewChanged() {
      Globals.activeViewHandler = function(args) {
        console.log(JSON.stringify(args));
      };

      Office.context.document.addHandlerAsync(Office.EventType.ActiveViewChanged, Globals.activeViewHandler, function(
        asyncResult
      ) {
        if (asyncResult.status == "failed") {
          console.log("Action failed with error: " + asyncResult.error.message);
        } else {
          console.log(asyncResult.status);
        }
      });
    }

      var obs = new OBSWebSocket();
    async function connectToOBS() {
      //connect to OBS Websocket localhost
      //Get websocket connection info
      //Enter the websocketIP address
      const websocketIP = document.getElementById("IP").value;

      //Enter the OBS websocket port number
      const websocketPort = document.getElementById("Port").value;

      //Enter the OBS websocket server password
      const websocketPassword = document.getElementById("PW").value;

      console.log(`ws://${websocketIP}:${websocketPort}`);
      // connect to OBS websocket
      try {
        const { obsWebSocketVersion, negotiatedRpcVersion } = await obs.connect(
          `ws://${websocketIP}:${websocketPort}`,
          websocketPassword,
          {
            rpcVersion: 1
          }
        );
        console.log(`Connected to server ${obsWebSocketVersion} (using RPC ${negotiatedRpcVersion})`);
      } catch (error) {
        console.error("Failed to connect", error.code, error.message);
      }
      obs.on("error", (err) => {
        console.error("Socket error:", err);
      });
    }

    obs.on("InputSettingsChanged", async function (event) {
      console.log(event)
      //if ppt scriptlab text source
      if(event.inputName === "Navigation Text"){
        //get the message
        const navigate = event.inputSettings.text
        console.log(navigate)
        //if next 
        if (navigate === "Next") { goToNextSlideByIndex(); setTimeout(clearNavigateRequest, 3000)}
        //if current
        if (navigate === "Current") { goToNextSlideByIndex(); setTimeout(clearNavigateRequest, 3000)}
        //if previous
        if (navigate === "Previous") { goToPreviousSlideByIndex(); setTimeout(clearNavigateRequest, 3000)}

      }
    }) 

        //clear text source
    async function clearNavigateRequest(){    
        await obs.call("SetInputSettings", {
          inputName: "Navigation Text",
          inputSettings: {
            text: "",
          }
        });
    }
  language: typescript
template:
  content: "<section class=\"ms-font-m\">\n\t<p class=\"ms-font-m\">Connect PowerPoint to OBS</p>\n\t<p class=\"ms-font-m\">Navigate the presentation.</p>\n</section>\n\n<button id=\"get-slide-metadata\" class=\"ms-Button\">\n    <span class=\"ms-Button-label\">Get current slide notes</span>\n</button>\n\n<button id=\"next-slide\" class=\"ms-Button\">\n    <span class=\"ms-Button-label\">Next slide</span>\n</button>\n\n<button id=\"previous-slide\" class=\"ms-Button\">\n    <span class=\"ms-Button-label\">Previous slide</span>\n</button>\n\n\n<section class=\"setup ms-font-m\">\n\t<h3>OBS WebSocket Server Settings</h3>\n\t<span class=\"ms-Button-label\">Enter WebSocket Server IP Address</span>\n\t<Input id=\"IP\" class=\"ms-Button\" value=\"localhost\"></Input>\n\t<span class=\"ms-Button-label\">Enter WebSocket Server Port</span><br>\n\t<Input id=\"Port\" class=\"ms-Button\" value=\"4455\"></Input>\n\t<span class=\"ms-Button-label\">Enter WebSocket Server Password</span><br>\n\t<Input type=\"password\" id=\"PW\" class=\"ms-Button\"></Input>\n\t<button id=\"connect-to-OBS\" class=\"ms-Button\">\n\t      <span class=\"ms-Button-label\">Connect to OBS WebSocket Server</span>\n    </button>\n</section>"
  language: html
style:
  content: |-
    section.samples {
        margin-top: 20px;
    }

    section.samples .ms-Button, section.setup .ms-Button {
        display: block;
        margin-bottom: 5px;
        margin-left: 20px;
        min-width: 80px;
    }  
  language: css
libraries: |-
  https://appsforoffice.microsoft.com/lib/1/hosted/office.js
  @types/office-js

  office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
  office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

  core-js@2.4.1/client/core.min.js
  @types/core-js

  jquery@3.1.1
  @types/jquery@3.3.1
  obs-websocket-js
