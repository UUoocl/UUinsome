name: Copy Slide Controls to Clipboard
description: copy shapes to the clipboard
host: POWERPOINT
api_set: {}
script:
  content: >
    // A script to control Open Broadcast Studio (OBS) with PowerPoint Slides
    // Add shapes with the prefix "obs-"
    //
    // The shape Name and Text will be sent to OBS.
    //
    // NOTE: this script only works on Windows or Mac.  Online PowerPoint is not
    supported


    $("#get-slide-metadata").on("click", currentSlide);


    $("#previous-slide").on("click", goToPreviousSlideByIndex);


    $("#next-slide").on("click", goToNextSlideByIndex);


    var results, stringResult;

    async function getSlideMetadata(direction) {
      //console.log(getActiveFileView());
      await Office.context.document.getSelectedDataAsync(Office.CoercionType.SlideRange, async function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
          console.error(asyncResult.error.message);
        } else {
          //console.log(JSON.stringify(asyncResult.value, null, 4));
          let result = asyncResult.value;
          result = result.slides[0].index;
          if (direction === "next") {
            goToNextSlide(result);
          }
          if (direction === "previous") {
            result = result - 2;
            goToPreviousSlide(result);
          }
          if (direction === "current") {
            result = result - 1;
            results = await getNotesForOBS(result).then((obj) => {
              console.log("then");
              stringResult = JSON.stringify(obj);
              console.log(stringResult);
              saveText(stringResult);
              return obj;
            });
            console.log("results", results);
            document.getElementById("clipboard").click()
            return;
          }
        }
      });
    }


    document.getElementById("clipboard").addEventListener("click", async (event)
    => {
      console.log("bttn")
      await navigator.clipboard.writeText(`${stringResult}`);
      const clipboardContents = await navigator.clipboard.readText();
      console.log(clipboardContents);
    })


    document.addEventListener("keypress", async (event) => {
      console.log("bttn")
      await navigator.clipboard.writeText(`${stringResult}`);
      const clipboardContents = await navigator.clipboard.readText();
      console.log(clipboardContents);
    })




    async function saveText(message) {
      console.log("hi");
      const text = new ClipboardItem({
        "text/plain": "Hellow World"
      });
      navigator.clipboard.writeText(text);
      const clipboardContents = await navigator.clipboard.readText();
      console.log(clipboardContents);
    }


    //Requests from OBS


    window.addEventListener("pptScriptLab_NextSlide", function(event) {
      console.log("message received: ", event);
      goToNextSlideByIndex;
    });


    window.addEventListener("pptScriptLab_PreviousSlide", function(event) {
      //console.log("message received: ",event)
      goToPreviousSlideByIndex;
    });


    //Button triggers


    async function currentSlide() {
      await getSlideMetadata("current");
      console.log("returned");
      //saveText()
    }


    function goToNextSlideByIndex() {
      getSlideMetadata("next");
    }


    function goToPreviousSlideByIndex() {
      getSlideMetadata("previous");
    }


    //change slide


    function goToNextSlide(slideIndex) {
      const goToNext = Office.Index.Next;
      Office.context.document.goToByIdAsync(goToNext, Office.GoToType.Slide, function(asyncResult) {
        if (asyncResult.status == "failed") {
          console.log("Action failed with error: " + asyncResult.error.message);
        } else {
          console.log(`Navigation successful, slide index, ${slideIndex}`);
          getNotesForOBS(slideIndex);
        }
      });
    }


    async function goToPreviousSlide(slideIndex) {
      const goToPrevious = Office.Index.Previous;
      Office.context.document.goToByIdAsync(goToPrevious, Office.GoToType.Index, function(asyncResult) {
        if (asyncResult.status == "failed") {
          console.log("Action failed with error: " + asyncResult.error.message);
        } else {
          console.log(`Navigation successful, slide index, ${slideIndex}`);
          getNotesForOBS(slideIndex);
        }
      });
    }


    // get the "obs-" shapes' Names and Text from the current slide.


    async function getNotesForOBS(slideIndex) {
      var pptData = {},
        found = 0;
      const indexArray = [];
      let result = await PowerPoint.run(async (context) => {
        // Get every shape in the current slide.
        const shapes: PowerPoint.ShapeCollection = context.presentation.slides.getItemAt(slideIndex).shapes;
        //load all the shape properties
        shapes.load("items");

        await context.sync();

        const shapeNames = [];
        // find the "obs-" shapes index
        await shapes.items.forEach(async (shape, index) => {
          if (shape.name.startsWith("obs-")) {
            found = 1;
            console.log(`index: ${index}, ID: ${shape.id}, Name: ${shape.name}`);
            indexArray.push(index);
            shapeNames.push(shape.name);
          }
        });

        //get Shape Text
        const shapeTextRanges = [];
        if (found) {
          //load text
          for (let i = 0; i < indexArray.length; i++) {
            const shapeTextRange: PowerPoint.TextRange = shapes.getItemAt(indexArray[i]).textFrame.textRange;
            shapeTextRanges.push(shapeTextRange);
            shapeTextRanges[i].load("text");
          }

          await context.sync();

          //build the message
          for (let i = 0; i < shapeTextRanges.length; i++) {
            //console.log(shapeTextRanges[i]._T);
            pptData[shapeNames[i]] = shapeTextRanges[i].text;
          }
          pptData.slidePosition = slideIndex + 1;
          //console.log("index length", pptData)

          return pptData;
        }
      });

      return pptData;
      console.log("result", result);
      let pptstring = JSON.stringify(pptData);
      console.log("pptstring", JSON.stringify(pptData));
      console.log("pptdata", pptData);
    }


    //general Office.initialize function. Fires on load of the add-in.


    Office.initialize = function() {
      //var Globals = { activeViewHandler: 0, firstSlideId: 0 };

      //console.log(getActiveFileView())
      //Gets whether the current view is edit or read.
      const currentView = getActiveFileView();

      //register for the active view changed handler
      registerActiveViewChanged();

      //render the content based off of the currentView
      //....
    };


    function getActiveFileView() {
      Office.context.document.getActiveViewAsync(function(asyncResult) {
        if (asyncResult.status == "failed") {
          console.log("Action failed with error: " + asyncResult.error.message);
        } else {
          console.log(asyncResult.value);
        }
      });
    }


    function registerActiveViewChanged() {
      Globals.activeViewHandler = function(args) {
        console.log(JSON.stringify(args));
      };

      Office.context.document.addHandlerAsync(Office.EventType.ActiveViewChanged, Globals.activeViewHandler, function(
        asyncResult
      ) {
        if (asyncResult.status == "failed") {
          console.log("Action failed with error: " + asyncResult.error.message);
        } else {
          console.log(asyncResult.status);
        }
      });
    }
  language: typescript
template:
  content: "<section class=\"ms-font-m\">\n\t<p class=\"ms-font-m\">Connect PowerPoint to OBS</p>\n\t<p class=\"ms-font-m\">Navigate the presentation.</p>\n</section>\n\n<button id=\"get-slide-metadata\" class=\"ms-Button\">\n    <span class=\"ms-Button-label\">Get current slide notes</span>\n</button>\n\n<button id=\"next-slide\" class=\"ms-Button\">\n    <span class=\"ms-Button-label\">Next slide</span>\n</button>\n\n<button id=\"previous-slide\" class=\"ms-Button\">\n    <span class=\"ms-Button-label\">Previous slide</span>\n</button>\n\n<button id=\"clipboard\" class=\"ms-Button\">\n    <span class=\"ms-Button-label\">click event</span>\n</button>\n\n</section>"
  language: html
style:
  content: |-
    section.samples {
        margin-top: 20px;
    }

    section.samples .ms-Button, section.setup .ms-Button {
        display: block;
        margin-bottom: 5px;
        margin-left: 20px;
        min-width: 80px;
    }  
  language: css
libraries: |-
  https://appsforoffice.microsoft.com/lib/1/hosted/office.js
  @types/office-js

  office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
  office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

  core-js@2.4.1/client/core.min.js
  @types/core-js

  jquery@3.1.1
  @types/jquery@3.3.1
  obs-websocket-js
